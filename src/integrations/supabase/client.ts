
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wlawjupusugrhojbywyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsYXdqdXB1c3VncmhvamJ5d3lxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwMTIxOTYsImV4cCI6MjA2MTU4ODE5Nn0.-TMflVxBkU4MTTxRWd0jrSiNBCLhxnl8R4EqsrWrSlg";

// Configure auth persistence options with properly typed flowType
const supabaseOptions = {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'implicit' as const
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

// Create a demo client with RLS bypass capabilities
const createDemoClient = () => {
  return createClient<Database>(
    SUPABASE_URL, 
    SUPABASE_PUBLISHABLE_KEY, 
    {
      ...supabaseOptions,
      global: {
        headers: {
          // Special header to bypass RLS in demo mode
          'x-demo-bypass-rls': 'true',
        }
      }
    }
  );
};

// Enhanced authentication helper for demo purposes
export const requireAuth = async (callback: () => Promise<any>) => {
  try {
    // First check if we have a real session
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error("Error checking session:", error);
      throw new Error('Authentication verification failed');
    }
    
    // If we have a real session, proceed with the callback
    if (session) {
      console.log("Real authentication confirmed, executing protected operation");
      return await callback();
    }
    
    // If no real session, check for demo credentials
    const mockRole = localStorage.getItem('userRole');
    const demoEmails = ['admin@gym.com', 'trainer@gym.com', 'user@gym.com'];
    const isDemoUser = mockRole && demoEmails.some(email => email.includes(mockRole.toLowerCase()));
    
    if (isDemoUser) {
      console.log("Using demo credentials - bypassing RLS restrictions");
      
      // Create a demo client with RLS bypass
      const demoClient = createDemoClient();
      
      // Since we're in demo mode, skip the real auth attempt
      // and proceed directly with the demo client
      return await executeDemoOperation(demoClient, callback);
    }
    
    // If we get here, there's no session and no demo credentials
    console.error("No active session found and not using demo credentials");
    throw new Error('Authentication required');
  } catch (error) {
    console.error("Authentication error:", error);
    throw error;
  }
};

// Helper function to execute operations with the demo client
const executeDemoOperation = async (demoClient: any, callback: () => Promise<any>) => {
  // Store the original supabase reference
  const originalSupabase = supabase;
  
  try {
    // Create a custom dynamic import wrapper to handle the module reference swap
    const wrappedCallback = async () => {
      // Create a temporary proxy to intercept any supabase calls
      const supabaseProxy = new Proxy(originalSupabase, {
        get: function(target, prop) {
          // Forward any property access to the demo client
          return demoClient[prop];
        }
      });
      
      // Temporarily replace the global supabase object
      (window as any).supabase = supabaseProxy;
      
      // Execute the callback with our proxy in place
      const result = await callback();
      
      return result;
    };
    
    // Run the wrapped callback
    return await wrappedCallback();
  } finally {
    // Always restore the original supabase client
    (window as any).supabase = originalSupabase;
  }
};
