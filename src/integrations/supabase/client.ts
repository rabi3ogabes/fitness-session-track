
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wlawjupusugrhojbywyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsYXdqdXB1c3VncmhvamJ5d3lxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwMTIxOTYsImV4cCI6MjA2MTU4ODE5Nn0.-TMflVxBkU4MTTxRWd0jrSiNBCLhxnl8R4EqsrWrSlg";

// Configure auth persistence options
const supabaseOptions = {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  },
  global: {
    fetch: (...args) => {
      // Enhanced fetch with improved timeout and retry logic
      const [resource, config] = args;
      
      // Use AbortController for timeout handling
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // Extended to 30 seconds
      
      // Add signal to the request config
      const updatedConfig = {
        ...config,
        signal: controller.signal,
        headers: {
          ...config?.headers,
          // Add cache control headers to prevent stale responses
          'Cache-Control': 'no-cache, no-store',
          'Pragma': 'no-cache'
        }
      };
      
      return fetch(resource, updatedConfig)
        .then(response => {
          clearTimeout(timeoutId);
          return response;
        })
        .catch(error => {
          clearTimeout(timeoutId);
          
          // Log detailed error information to help with debugging
          console.error(`Supabase fetch error for ${resource}:`, error);
          
          // Rethrow with more descriptive message
          throw error instanceof Error ? 
            new Error(`Database connection failed: ${error.message}`) : 
            new Error('Database connection failed');
        });
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

// Security helper function to check if a user is authenticated before making DB calls
export const requireAuth = async (callback: () => Promise<any>) => {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session) {
    throw new Error('Authentication required');
  }
  return callback();
};
