
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wlawjupusugrhojbywyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsYXdqdXB1c3VncmhvamJ5d3lxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwMTIxOTYsImV4cCI6MjA2MTU4ODE5Nn0.-TMflVxBkU4MTTxRWd0jrSiNBCLhxnl8R4EqsrWrSlg";

// Configure auth persistence options with properly typed flowType
const supabaseOptions = {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'implicit' as const
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

// Security helper function to check if a user is authenticated before making DB calls
export const requireAuth = async (callback: () => Promise<any>) => {
  const { data: { session }, error } = await supabase.auth.getSession();
  
  if (error) {
    console.error("Error checking session:", error);
    throw new Error('Authentication verification failed');
  }
  
  if (!session) {
    // For demo credentials, we'll create a mock session
    const demoEmails = ['admin@gym.com', 'trainer@gym.com', 'user@gym.com'];
    const mockRole = localStorage.getItem('userRole');
    
    if (mockRole && demoEmails.some(email => email.includes(mockRole.toLowerCase()))) {
      console.log("Using demo credentials - mock session");
      return callback();
    }
    
    console.error("No active session found");
    throw new Error('Authentication required');
  }
  
  console.log("Authentication confirmed, executing protected operation");
  return callback();
};
